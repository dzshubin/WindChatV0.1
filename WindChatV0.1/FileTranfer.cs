// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_tranfer.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM {

  /// <summary>Holder for reflection information generated from file_tranfer.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class FileTranferReflection {

    #region Descriptor
    /// <summary>File descriptor for file_tranfer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FileTranferReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJmaWxlX3RyYW5mZXIucHJvdG8SAklNIkoKCUZpbGVUcmFucxIOCgZyZXFf",
            "aWQYASABKAMSEQoJdGFyZ2V0X2lkGAIgASgDEgwKBG5hbWUYAyABKAkSDAoE",
            "ZGF0YRgEIAEoDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::IM.FileTrans), global::IM.FileTrans.Parser, new[]{ "ReqId", "TargetId", "Name", "Data" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class FileTrans : pb::IMessage<FileTrans> {
    private static readonly pb::MessageParser<FileTrans> _parser = new pb::MessageParser<FileTrans>(() => new FileTrans());
    public static pb::MessageParser<FileTrans> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.FileTranferReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public FileTrans() {
      OnConstruction();
    }

    partial void OnConstruction();

    public FileTrans(FileTrans other) : this() {
      reqId_ = other.reqId_;
      targetId_ = other.targetId_;
      name_ = other.name_;
      data_ = other.data_;
    }

    public FileTrans Clone() {
      return new FileTrans(this);
    }

    /// <summary>Field number for the "req_id" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private long reqId_;
    /// <summary>
    ///  请求者id
    /// </summary>
    public long ReqId {
      get { return reqId_; }
      set {
        reqId_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private long targetId_;
    /// <summary>
    ///  目标用户id
    /// </summary>
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    /// <summary>
    ///  文件名
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 4;
    private pb::ByteString data_ = pb::ByteString.Empty;
    /// <summary>
    ///  文件数据
    /// </summary>
    public pb::ByteString Data {
      get { return data_; }
      set {
        data_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as FileTrans);
    }

    public bool Equals(FileTrans other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if (TargetId != other.TargetId) return false;
      if (Name != other.Name) return false;
      if (Data != other.Data) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ReqId != 0L) hash ^= ReqId.GetHashCode();
      if (TargetId != 0L) hash ^= TargetId.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReqId);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(34);
        output.WriteBytes(Data);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ReqId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReqId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Data);
      }
      return size;
    }

    public void MergeFrom(FileTrans other) {
      if (other == null) {
        return;
      }
      if (other.ReqId != 0L) {
        ReqId = other.ReqId;
      }
      if (other.TargetId != 0L) {
        TargetId = other.TargetId;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReqId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 34: {
            Data = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
