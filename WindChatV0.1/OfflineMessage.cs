// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: offline_message.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM {

  /// <summary>Holder for reflection information generated from offline_message.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class OfflineMessageReflection {

    #region Descriptor
    /// <summary>File descriptor for offline_message.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OfflineMessageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVvZmZsaW5lX21lc3NhZ2UucHJvdG8SAklNIkQKC09mZmxpbmVDYWNoEg8K",
            "B3VzZXJfaWQYASABKAMSJAoIbWVzc2FnZXMYAiADKAsyEi5JTS5PZmZsaW5l",
            "TWVzc2FnZSJFCg5PZmZsaW5lTWVzc2FnZRIPCgdzZW5kX2lkGAEgASgDEg8K",
            "B2NvbnRlbnQYAiABKAkSEQoJc2VuZF90aW1lGAMgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::IM.OfflineCach), global::IM.OfflineCach.Parser, new[]{ "UserId", "Messages" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::IM.OfflineMessage), global::IM.OfflineMessage.Parser, new[]{ "SendId", "Content", "SendTime" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OfflineCach : pb::IMessage<OfflineCach> {
    private static readonly pb::MessageParser<OfflineCach> _parser = new pb::MessageParser<OfflineCach>(() => new OfflineCach());
    public static pb::MessageParser<OfflineCach> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.OfflineMessageReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public OfflineCach() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OfflineCach(OfflineCach other) : this() {
      userId_ = other.userId_;
      messages_ = other.messages_.Clone();
    }

    public OfflineCach Clone() {
      return new OfflineCach(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///   用户id
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "messages" field.</summary>
    public const int MessagesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.OfflineMessage> _repeated_messages_codec
        = pb::FieldCodec.ForMessage(18, global::IM.OfflineMessage.Parser);
    private readonly pbc::RepeatedField<global::IM.OfflineMessage> messages_ = new pbc::RepeatedField<global::IM.OfflineMessage>();
    /// <summary>
    ///   离线消息集合 
    /// </summary>
    public pbc::RepeatedField<global::IM.OfflineMessage> Messages {
      get { return messages_; }
    }

    public override bool Equals(object other) {
      return Equals(other as OfflineCach);
    }

    public bool Equals(OfflineCach other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if(!messages_.Equals(other.messages_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      hash ^= messages_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      messages_.WriteTo(output, _repeated_messages_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      size += messages_.CalculateSize(_repeated_messages_codec);
      return size;
    }

    public void MergeFrom(OfflineCach other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      messages_.Add(other.messages_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 18: {
            messages_.AddEntriesFrom(input, _repeated_messages_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OfflineMessage : pb::IMessage<OfflineMessage> {
    private static readonly pb::MessageParser<OfflineMessage> _parser = new pb::MessageParser<OfflineMessage>(() => new OfflineMessage());
    public static pb::MessageParser<OfflineMessage> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.OfflineMessageReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public OfflineMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OfflineMessage(OfflineMessage other) : this() {
      sendId_ = other.sendId_;
      content_ = other.content_;
      sendTime_ = other.sendTime_;
    }

    public OfflineMessage Clone() {
      return new OfflineMessage(this);
    }

    /// <summary>Field number for the "send_id" field.</summary>
    public const int SendIdFieldNumber = 1;
    private long sendId_;
    /// <summary>
    ///  发送者id
    /// </summary>
    public long SendId {
      get { return sendId_; }
      set {
        sendId_ = value;
      }
    }

    /// <summary>Field number for the "content" field.</summary>
    public const int ContentFieldNumber = 2;
    private string content_ = "";
    /// <summary>
    ///  发送内容
    /// </summary>
    public string Content {
      get { return content_; }
      set {
        content_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "send_time" field.</summary>
    public const int SendTimeFieldNumber = 3;
    private string sendTime_ = "";
    /// <summary>
    ///  发送时间
    /// </summary>
    public string SendTime {
      get { return sendTime_; }
      set {
        sendTime_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as OfflineMessage);
    }

    public bool Equals(OfflineMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SendId != other.SendId) return false;
      if (Content != other.Content) return false;
      if (SendTime != other.SendTime) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (SendId != 0L) hash ^= SendId.GetHashCode();
      if (Content.Length != 0) hash ^= Content.GetHashCode();
      if (SendTime.Length != 0) hash ^= SendTime.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SendId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(SendId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (SendTime.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(SendTime);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (SendId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SendId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      if (SendTime.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SendTime);
      }
      return size;
    }

    public void MergeFrom(OfflineMessage other) {
      if (other == null) {
        return;
      }
      if (other.SendId != 0L) {
        SendId = other.SendId;
      }
      if (other.Content.Length != 0) {
        Content = other.Content;
      }
      if (other.SendTime.Length != 0) {
        SendTime = other.SendTime;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            SendId = input.ReadInt64();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 26: {
            SendTime = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
