// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: operate_req_base.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM {

  /// <summary>Holder for reflection information generated from operate_req_base.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class OperateReqBaseReflection {

    #region Descriptor
    /// <summary>File descriptor for operate_req_base.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static OperateReqBaseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZvcGVyYXRlX3JlcV9iYXNlLnByb3RvEgJJTSI1Cg5PcGVyYXRlUmVxQmFz",
            "ZRIPCgd1c2VyX2lkGAEgASgDEhIKCmNoYW5uZWxfaWQYAiABKAViBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::IM.OperateReqBase), global::IM.OperateReqBase.Parser, new[]{ "UserId", "ChannelId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class OperateReqBase : pb::IMessage<OperateReqBase> {
    private static readonly pb::MessageParser<OperateReqBase> _parser = new pb::MessageParser<OperateReqBase>(() => new OperateReqBase());
    public static pb::MessageParser<OperateReqBase> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.OperateReqBaseReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public OperateReqBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    public OperateReqBase(OperateReqBase other) : this() {
      userId_ = other.userId_;
      channelId_ = other.channelId_;
    }

    public OperateReqBase Clone() {
      return new OperateReqBase(this);
    }

    /// <summary>Field number for the "user_id" field.</summary>
    public const int UserIdFieldNumber = 1;
    private long userId_;
    /// <summary>
    ///  ”√ªßid
    /// </summary>
    public long UserId {
      get { return userId_; }
      set {
        userId_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 2;
    private int channelId_;
    /// <summary>
    ///  ∆µµ¿id
    /// </summary>
    public int ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as OperateReqBase);
    }

    public bool Equals(OperateReqBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UserId != other.UserId) return false;
      if (ChannelId != other.ChannelId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (UserId != 0L) hash ^= UserId.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UserId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(UserId);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ChannelId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UserId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(UserId);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelId);
      }
      return size;
    }

    public void MergeFrom(OperateReqBase other) {
      if (other == null) {
        return;
      }
      if (other.UserId != 0L) {
        UserId = other.UserId;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UserId = input.ReadInt64();
            break;
          }
          case 16: {
            ChannelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
