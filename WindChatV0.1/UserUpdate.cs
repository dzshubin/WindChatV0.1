// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: user_update.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM {

  /// <summary>Holder for reflection information generated from user_update.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class UserUpdateReflection {

    #region Descriptor
    /// <summary>File descriptor for user_update.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static UserUpdateReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChF1c2VyX3VwZGF0ZS5wcm90bxICSU0aDmNvbnRhY3RzLnByb3RvIkYKDVVz",
            "ZXJVcGRhdGVSZXESDgoGcmVxX2lkGAEgASgDEhEKCXRhcmdldF9pZBgCIAEo",
            "AxISCgpjaGFubmVsX2lkGAMgASgFIksKDVVzZXJVcGRhdGVBY2sSDgoGcmVx",
            "X2lkGAEgASgDEhYKBHVzZXIYAiABKAsyCC5JTS5Vc2VyEhIKCmNoYW5uZWxf",
            "aWQYAyABKAViBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.ContactsReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::IM.UserUpdateReq), global::IM.UserUpdateReq.Parser, new[]{ "ReqId", "TargetId", "ChannelId" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::IM.UserUpdateAck), global::IM.UserUpdateAck.Parser, new[]{ "ReqId", "User", "ChannelId" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserUpdateReq : pb::IMessage<UserUpdateReq> {
    private static readonly pb::MessageParser<UserUpdateReq> _parser = new pb::MessageParser<UserUpdateReq>(() => new UserUpdateReq());
    public static pb::MessageParser<UserUpdateReq> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.UserUpdateReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UserUpdateReq() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UserUpdateReq(UserUpdateReq other) : this() {
      reqId_ = other.reqId_;
      targetId_ = other.targetId_;
      channelId_ = other.channelId_;
    }

    public UserUpdateReq Clone() {
      return new UserUpdateReq(this);
    }

    /// <summary>Field number for the "req_id" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private long reqId_;
    /// <summary>
    ///  请求者id
    /// </summary>
    public long ReqId {
      get { return reqId_; }
      set {
        reqId_ = value;
      }
    }

    /// <summary>Field number for the "target_id" field.</summary>
    public const int TargetIdFieldNumber = 2;
    private long targetId_;
    /// <summary>
    ///  目标用户id
    /// </summary>
    public long TargetId {
      get { return targetId_; }
      set {
        targetId_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 3;
    private int channelId_;
    /// <summary>
    ///  频道id 可选
    /// </summary>
    public int ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UserUpdateReq);
    }

    public bool Equals(UserUpdateReq other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if (TargetId != other.TargetId) return false;
      if (ChannelId != other.ChannelId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ReqId != 0L) hash ^= ReqId.GetHashCode();
      if (TargetId != 0L) hash ^= TargetId.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReqId);
      }
      if (TargetId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TargetId);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChannelId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ReqId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReqId);
      }
      if (TargetId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TargetId);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelId);
      }
      return size;
    }

    public void MergeFrom(UserUpdateReq other) {
      if (other == null) {
        return;
      }
      if (other.ReqId != 0L) {
        ReqId = other.ReqId;
      }
      if (other.TargetId != 0L) {
        TargetId = other.TargetId;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReqId = input.ReadInt64();
            break;
          }
          case 16: {
            TargetId = input.ReadInt64();
            break;
          }
          case 24: {
            ChannelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class UserUpdateAck : pb::IMessage<UserUpdateAck> {
    private static readonly pb::MessageParser<UserUpdateAck> _parser = new pb::MessageParser<UserUpdateAck>(() => new UserUpdateAck());
    public static pb::MessageParser<UserUpdateAck> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.UserUpdateReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public UserUpdateAck() {
      OnConstruction();
    }

    partial void OnConstruction();

    public UserUpdateAck(UserUpdateAck other) : this() {
      reqId_ = other.reqId_;
      User = other.user_ != null ? other.User.Clone() : null;
      channelId_ = other.channelId_;
    }

    public UserUpdateAck Clone() {
      return new UserUpdateAck(this);
    }

    /// <summary>Field number for the "req_id" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private long reqId_;
    /// <summary>
    ///  请求者id
    /// </summary>
    public long ReqId {
      get { return reqId_; }
      set {
        reqId_ = value;
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 2;
    private global::IM.User user_;
    /// <summary>
    ///  用户信息
    /// </summary>
    public global::IM.User User {
      get { return user_; }
      set {
        user_ = value;
      }
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 3;
    private int channelId_;
    /// <summary>
    ///  频道id 可选
    /// </summary>
    public int ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as UserUpdateAck);
    }

    public bool Equals(UserUpdateAck other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if (!object.Equals(User, other.User)) return false;
      if (ChannelId != other.ChannelId) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ReqId != 0L) hash ^= ReqId.GetHashCode();
      if (user_ != null) hash ^= User.GetHashCode();
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReqId);
      }
      if (user_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(User);
      }
      if (ChannelId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(ChannelId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ReqId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReqId);
      }
      if (user_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(User);
      }
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelId);
      }
      return size;
    }

    public void MergeFrom(UserUpdateAck other) {
      if (other == null) {
        return;
      }
      if (other.ReqId != 0L) {
        ReqId = other.ReqId;
      }
      if (other.user_ != null) {
        if (user_ == null) {
          user_ = new global::IM.User();
        }
        User.MergeFrom(other.User);
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReqId = input.ReadInt64();
            break;
          }
          case 18: {
            if (user_ == null) {
              user_ = new global::IM.User();
            }
            input.ReadMessage(user_);
            break;
          }
          case 24: {
            ChannelId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
