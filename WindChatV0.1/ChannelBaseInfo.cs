// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel_base_info.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM {

  /// <summary>Holder for reflection information generated from channel_base_info.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ChannelBaseInfoReflection {

    #region Descriptor
    /// <summary>File descriptor for channel_base_info.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChannelBaseInfoReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdjaGFubmVsX2Jhc2VfaW5mby5wcm90bxICSU0iOAoPQ2hhbm5lbEJhc2VJ",
            "bmZvEiUKDGNoYW5uZWxfYmFzZRgBIAMoCzIPLklNLkNoYW5uZWxCYXNlIkoK",
            "C0NoYW5uZWxCYXNlEhIKCmNoYW5uZWxfaWQYASABKAUSFAoMY2hhbm5lbF9u",
            "YW1lGAIgASgJEhEKCWlzX2luc2lkZRgDIAEoCGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::IM.ChannelBaseInfo), global::IM.ChannelBaseInfo.Parser, new[]{ "ChannelBase" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::IM.ChannelBase), global::IM.ChannelBase.Parser, new[]{ "ChannelId", "ChannelName", "IsInside" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChannelBaseInfo : pb::IMessage<ChannelBaseInfo> {
    private static readonly pb::MessageParser<ChannelBaseInfo> _parser = new pb::MessageParser<ChannelBaseInfo>(() => new ChannelBaseInfo());
    public static pb::MessageParser<ChannelBaseInfo> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.ChannelBaseInfoReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChannelBaseInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChannelBaseInfo(ChannelBaseInfo other) : this() {
      channelBase_ = other.channelBase_.Clone();
    }

    public ChannelBaseInfo Clone() {
      return new ChannelBaseInfo(this);
    }

    /// <summary>Field number for the "channel_base" field.</summary>
    public const int ChannelBaseFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IM.ChannelBase> _repeated_channelBase_codec
        = pb::FieldCodec.ForMessage(10, global::IM.ChannelBase.Parser);
    private readonly pbc::RepeatedField<global::IM.ChannelBase> channelBase_ = new pbc::RepeatedField<global::IM.ChannelBase>();
    public pbc::RepeatedField<global::IM.ChannelBase> ChannelBase {
      get { return channelBase_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ChannelBaseInfo);
    }

    public bool Equals(ChannelBaseInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channelBase_.Equals(other.channelBase_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= channelBase_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      channelBase_.WriteTo(output, _repeated_channelBase_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += channelBase_.CalculateSize(_repeated_channelBase_codec);
      return size;
    }

    public void MergeFrom(ChannelBaseInfo other) {
      if (other == null) {
        return;
      }
      channelBase_.Add(other.channelBase_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            channelBase_.AddEntriesFrom(input, _repeated_channelBase_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChannelBase : pb::IMessage<ChannelBase> {
    private static readonly pb::MessageParser<ChannelBase> _parser = new pb::MessageParser<ChannelBase>(() => new ChannelBase());
    public static pb::MessageParser<ChannelBase> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.ChannelBaseInfoReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChannelBase() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChannelBase(ChannelBase other) : this() {
      channelId_ = other.channelId_;
      channelName_ = other.channelName_;
      isInside_ = other.isInside_;
    }

    public ChannelBase Clone() {
      return new ChannelBase(this);
    }

    /// <summary>Field number for the "channel_id" field.</summary>
    public const int ChannelIdFieldNumber = 1;
    private int channelId_;
    public int ChannelId {
      get { return channelId_; }
      set {
        channelId_ = value;
      }
    }

    /// <summary>Field number for the "channel_name" field.</summary>
    public const int ChannelNameFieldNumber = 2;
    private string channelName_ = "";
    public string ChannelName {
      get { return channelName_; }
      set {
        channelName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_inside" field.</summary>
    public const int IsInsideFieldNumber = 3;
    private bool isInside_;
    /// <summary>
    ///  玩家是否加入了该频道
    /// </summary>
    public bool IsInside {
      get { return isInside_; }
      set {
        isInside_ = value;
      }
    }

    public override bool Equals(object other) {
      return Equals(other as ChannelBase);
    }

    public bool Equals(ChannelBase other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ChannelId != other.ChannelId) return false;
      if (ChannelName != other.ChannelName) return false;
      if (IsInside != other.IsInside) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ChannelId != 0) hash ^= ChannelId.GetHashCode();
      if (ChannelName.Length != 0) hash ^= ChannelName.GetHashCode();
      if (IsInside != false) hash ^= IsInside.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ChannelId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ChannelId);
      }
      if (ChannelName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChannelName);
      }
      if (IsInside != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsInside);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ChannelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ChannelId);
      }
      if (ChannelName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChannelName);
      }
      if (IsInside != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(ChannelBase other) {
      if (other == null) {
        return;
      }
      if (other.ChannelId != 0) {
        ChannelId = other.ChannelId;
      }
      if (other.ChannelName.Length != 0) {
        ChannelName = other.ChannelName;
      }
      if (other.IsInside != false) {
        IsInside = other.IsInside;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ChannelId = input.ReadInt32();
            break;
          }
          case 18: {
            ChannelName = input.ReadString();
            break;
          }
          case 24: {
            IsInside = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
