// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: channel.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM {

  /// <summary>Holder for reflection information generated from channel.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ChannelReflection {

    #region Descriptor
    /// <summary>File descriptor for channel.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ChannelReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1jaGFubmVsLnByb3RvEgJJTRoOY29udGFjdHMucHJvdG8iKwoKQ2hhbm5l",
            "bFZlYxIdCghjaGFubmVscxgBIAMoCzILLklNLkNoYW5uZWwiOwoHQ2hhbm5l",
            "bBIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEhYKBHVzZXIYAyADKAsyCC5J",
            "TS5Vc2VyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::IM.ContactsReflection.Descriptor, },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::IM.ChannelVec), global::IM.ChannelVec.Parser, new[]{ "Channels" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::IM.Channel), global::IM.Channel.Parser, new[]{ "Id", "Name", "User" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class ChannelVec : pb::IMessage<ChannelVec> {
    private static readonly pb::MessageParser<ChannelVec> _parser = new pb::MessageParser<ChannelVec>(() => new ChannelVec());
    public static pb::MessageParser<ChannelVec> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.ChannelReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public ChannelVec() {
      OnConstruction();
    }

    partial void OnConstruction();

    public ChannelVec(ChannelVec other) : this() {
      channels_ = other.channels_.Clone();
    }

    public ChannelVec Clone() {
      return new ChannelVec(this);
    }

    /// <summary>Field number for the "channels" field.</summary>
    public const int ChannelsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::IM.Channel> _repeated_channels_codec
        = pb::FieldCodec.ForMessage(10, global::IM.Channel.Parser);
    private readonly pbc::RepeatedField<global::IM.Channel> channels_ = new pbc::RepeatedField<global::IM.Channel>();
    public pbc::RepeatedField<global::IM.Channel> Channels {
      get { return channels_; }
    }

    public override bool Equals(object other) {
      return Equals(other as ChannelVec);
    }

    public bool Equals(ChannelVec other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!channels_.Equals(other.channels_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= channels_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      channels_.WriteTo(output, _repeated_channels_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += channels_.CalculateSize(_repeated_channels_codec);
      return size;
    }

    public void MergeFrom(ChannelVec other) {
      if (other == null) {
        return;
      }
      channels_.Add(other.channels_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            channels_.AddEntriesFrom(input, _repeated_channels_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Channel : pb::IMessage<Channel> {
    private static readonly pb::MessageParser<Channel> _parser = new pb::MessageParser<Channel>(() => new Channel());
    public static pb::MessageParser<Channel> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.ChannelReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Channel() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Channel(Channel other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      user_ = other.user_.Clone();
    }

    public Channel Clone() {
      return new Channel(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    /// <summary>
    ///  频道id
    /// </summary>
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    /// <summary>
    ///  频道名称
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "user" field.</summary>
    public const int UserFieldNumber = 3;
    private static readonly pb::FieldCodec<global::IM.User> _repeated_user_codec
        = pb::FieldCodec.ForMessage(26, global::IM.User.Parser);
    private readonly pbc::RepeatedField<global::IM.User> user_ = new pbc::RepeatedField<global::IM.User>();
    /// <summary>
    ///  所属用户
    /// </summary>
    public pbc::RepeatedField<global::IM.User> User {
      get { return user_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Channel);
    }

    public bool Equals(Channel other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if(!user_.Equals(other.user_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= user_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      user_.WriteTo(output, _repeated_user_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += user_.CalculateSize(_repeated_user_codec);
      return size;
    }

    public void MergeFrom(Channel other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      user_.Add(other.user_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            user_.AddEntriesFrom(input, _repeated_user_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
