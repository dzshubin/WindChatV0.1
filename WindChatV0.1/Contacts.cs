// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contacts.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace IM {

  /// <summary>Holder for reflection information generated from contacts.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class ContactsReflection {

    #region Descriptor
    /// <summary>File descriptor for contacts.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContactsReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5jb250YWN0cy5wcm90bxICSU0iNgoIQ29udGFjdHMSDgoGcmVxX2lkGAEg",
            "ASgDEhoKCGNvbnRhY3RzGAIgAygLMgguSU0uVXNlciJACgRVc2VyEgoKAmlk",
            "GAEgASgDEgwKBG5hbWUYAiABKAkSEQoJbmlja19uYW1lGAMgASgJEgsKA3Nl",
            "eBgEIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::IM.Contacts), global::IM.Contacts.Parser, new[]{ "ReqId", "Contacts_" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::IM.User), global::IM.User.Parser, new[]{ "Id", "Name", "NickName", "Sex" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Contacts : pb::IMessage<Contacts> {
    private static readonly pb::MessageParser<Contacts> _parser = new pb::MessageParser<Contacts>(() => new Contacts());
    public static pb::MessageParser<Contacts> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.ContactsReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Contacts() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Contacts(Contacts other) : this() {
      reqId_ = other.reqId_;
      contacts_ = other.contacts_.Clone();
    }

    public Contacts Clone() {
      return new Contacts(this);
    }

    /// <summary>Field number for the "req_id" field.</summary>
    public const int ReqIdFieldNumber = 1;
    private long reqId_;
    public long ReqId {
      get { return reqId_; }
      set {
        reqId_ = value;
      }
    }

    /// <summary>Field number for the "contacts" field.</summary>
    public const int Contacts_FieldNumber = 2;
    private static readonly pb::FieldCodec<global::IM.User> _repeated_contacts_codec
        = pb::FieldCodec.ForMessage(18, global::IM.User.Parser);
    private readonly pbc::RepeatedField<global::IM.User> contacts_ = new pbc::RepeatedField<global::IM.User>();
    public pbc::RepeatedField<global::IM.User> Contacts_ {
      get { return contacts_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Contacts);
    }

    public bool Equals(Contacts other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ReqId != other.ReqId) return false;
      if(!contacts_.Equals(other.contacts_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (ReqId != 0L) hash ^= ReqId.GetHashCode();
      hash ^= contacts_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReqId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReqId);
      }
      contacts_.WriteTo(output, _repeated_contacts_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (ReqId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReqId);
      }
      size += contacts_.CalculateSize(_repeated_contacts_codec);
      return size;
    }

    public void MergeFrom(Contacts other) {
      if (other == null) {
        return;
      }
      if (other.ReqId != 0L) {
        ReqId = other.ReqId;
      }
      contacts_.Add(other.contacts_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReqId = input.ReadInt64();
            break;
          }
          case 18: {
            contacts_.AddEntriesFrom(input, _repeated_contacts_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class User : pb::IMessage<User> {
    private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
    public static pb::MessageParser<User> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::IM.ContactsReflection.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public User() {
      OnConstruction();
    }

    partial void OnConstruction();

    public User(User other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      nickName_ = other.nickName_;
      sex_ = other.sex_;
    }

    public User Clone() {
      return new User(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "nick_name" field.</summary>
    public const int NickNameFieldNumber = 3;
    private string nickName_ = "";
    public string NickName {
      get { return nickName_; }
      set {
        nickName_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sex" field.</summary>
    public const int SexFieldNumber = 4;
    private string sex_ = "";
    public string Sex {
      get { return sex_; }
      set {
        sex_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as User);
    }

    public bool Equals(User other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (NickName != other.NickName) return false;
      if (Sex != other.Sex) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0L) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (NickName.Length != 0) hash ^= NickName.GetHashCode();
      if (Sex.Length != 0) hash ^= Sex.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (NickName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(NickName);
      }
      if (Sex.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Sex);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (NickName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NickName);
      }
      if (Sex.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sex);
      }
      return size;
    }

    public void MergeFrom(User other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0L) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.NickName.Length != 0) {
        NickName = other.NickName;
      }
      if (other.Sex.Length != 0) {
        Sex = other.Sex;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            NickName = input.ReadString();
            break;
          }
          case 34: {
            Sex = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
